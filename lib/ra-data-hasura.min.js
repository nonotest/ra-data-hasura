!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("ra-data-hasura",[],r):"object"==typeof exports?exports["ra-data-hasura"]=r():e["ra-data-hasura"]=r()}("undefined"!=typeof self?self:this,(function(){return function(e){var r={};function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}return a.m=e,a.c=r,a.d=function(e,r,t){a.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,r){if(1&r&&(e=a(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)a.d(t,n,function(r){return e[r]}.bind(null,n));return t},a.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(r,"a",r),r},a.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},a.p="",a(a.s=0)}([function(e,r,a){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var t=a(1);var n=function(e){return JSON.parse(JSON.stringify(e))};r.default=function(e,r,a){var s=function(e){var r="id";return a&&a.primaryKey[e]&&(r=a.primaryKey[e]),r},u=function(e,r){if(!r)return e;var a=Object.keys(r);if(0===a.length)return e;var t=Object.assign(e);return a.forEach((function(e){t[e]=r[e]})),t},i=function(e,r,a){var i,o,c,l={},g={},f=function(e){var r,a;if(e&&1===e.split(".").length)a="public",r=e;else{if(!e||2!==e.split(".").length)throw new Error(JSON.stringify({error:"Invalid table/schema resource"}));var t=e.split(".");a=t[0],r=t[1]}return{schema:a,tableName:r}}(r),d=f.schema,h=f.tableName,p=s(r);switch(e){case"GET_LIST":var y=n(t.selectQuery),b=n(t.countQuery);if(a.filter&&a.filter.q){var m=a.filter.q;delete a.filter.q,a.filter={...a.filter,...m}}y.args.table={name:h,schema:d},y.args.limit=a.pagination.perPage,y.args.offset=a.pagination.page*a.pagination.perPage-a.pagination.perPage,y.args.where=a.filter,y.args.order_by={column:a.sort.field||p,type:void 0===a.sort.order?"asc":a.sort.order.toLowerCase()},b.args.table={name:h,schema:d},b.args.where={},b.args.where[p]={$ne:null},b.args.where=u(b.args.where,a.filter),(g=n(t.bulkQuery)).args.push(y),g.args.push(b);break;case"GET_ONE":(g=n(t.selectQuery)).args.table={name:h,schema:d},g.args.where={},g.args.where[p]={$eq:a.id};break;case"CREATE":var w=Object.keys(a.data);(g=n(t.insertQuery)).args.table={name:h,schema:d},g.args.objects.push(a.data),w.push(p),g.args.returning=w;break;case"UPDATE":var E=Object.keys(a.data);(g=n(t.updateQuery)).args.table={name:h,schema:d},g.args.$set=a.data,g.args.where={},g.args.where[p]={$eq:a.id},E.push(p),g.args.returning=E;break;case"UPDATE_MANY":var v=Object.keys(a.data);(g=n(t.updateQuery)).args.table={name:h,schema:d},g.args.$set=a.data,g.args.where={},g.args.where[p]={$in:a.ids},v.push(p),g.args.returning=v;break;case"DELETE":var Q=Object.keys(a.previousData);(g=n(t.deleteQuery)).args.table={name:h,schema:d},g.args.where={},g.args.where[p]={$eq:a.id},Q.push(p),g.args.returning=Q;break;case"DELETE_MANY":(g=n(t.deleteQuery)).args.table={name:h,schema:d},g.args.where={},g.args.where[p]={$in:a.ids},g.args.returning=[p];break;case"GET_MANY":var _=n(t.selectQuery),O=n(t.countQuery);_.args.table={name:h,schema:d},_.args.where={},_.args.where[p]={$in:a.ids},_.args.where=u(_.args.where,a.filter),O.args.table={name:h,schema:d},O.args.where={},O.args.where[p]={$ne:null},O.args.where=u(O.args.where,a.filter),(g=n(t.bulkQuery)).args.push(_),g.args.push(O);break;case"GET_MANY_REFERENCE":var j=n(t.selectQuery),T=n(t.countQuery);j.args.table={name:h,schema:d},j.args.limit=a.pagination.perPage,j.args.offset=a.pagination.page*a.pagination.perPage-a.pagination.perPage,j.args.where=(i={},o=a.target,c=a.id,o in i?Object.defineProperty(i,o,{value:c,enumerable:!0,configurable:!0,writable:!0}):i[o]=c,i),j.args.where=u(j.args.where,a.filter),j.args.order_by={column:a.sort.field||p,type:void 0===a.sort.order?"asc":a.sort.order.toLowerCase()},T.args.table={name:h,schema:d},T.args.where={},T.args.where[p]={$ne:null},T.args.where=u(j.args.where,a.filter),(g=n(t.bulkQuery)).args.push(j),g.args.push(T);break;default:throw new Error("Unsupported type ".concat(e))}return l.body=JSON.stringify(g),{options:l}},o=function(e,r,a,t){if("error"in e||"code"in e)throw new Error(JSON.stringify(e));var n=s(a);switch("id"!==n&&(Array.isArray(e[0])?e[0].forEach((function(e){e.id=e[n]})):e[0].id=e[0][n]),r){case"GET_LIST":return{data:e[0],total:e[1].count};case"GET_ONE":return{data:e[0]};case"CREATE":case"UPDATE":return{data:e.returning[0]};case"UPDATE_MANY":return{data:e.returning.map((function(e){return e.id}))};case"DELETE":return{data:e.returning[0]};case"DELETE_MANY":return{data:e.returning.map((function(e){return e.id}))};case"GET_MANY":return{data:e[0]};case"GET_MANY_REFERENCE":return{data:e[0],total:e[1].count};default:return{data:e}}};return function(a,t,n){var s=i(a,t,n).options;return s.method="POST","function"==typeof r?r(e+"/v1/query",s).then((function(e){return o(e.json,a,t)})):(s.headers=r,fetch(e+"/v1/query",s).then((function(e){return e.json().then((function(e){return o(e,a,t)}))})))}},e.exports=r.default},function(e,r,a){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.deleteQuery=r.updateQuery=r.insertQuery=r.countQuery=r.selectQuery=r.bulkQuery=void 0;r.bulkQuery={type:"bulk",args:[]};r.selectQuery={type:"select",args:{table:{schema:"",name:""},columns:["*"]}};r.countQuery={type:"count",args:{table:{schema:"",name:""},where:{}}};r.insertQuery={type:"insert",args:{table:{schema:"",name:""},objects:[],returning:[]}};r.updateQuery={type:"update",args:{table:{schema:"",name:""},$set:{},where:{},returning:[]}};r.deleteQuery={type:"delete",args:{table:{schema:"",name:""},$set:{},where:{},returning:[]}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,